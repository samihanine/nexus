generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserPrivilege {
  ADMINISTRATOR
  USER
  ROOT
}

model User {
  id             String         @id @default(uuid())
  name           String
  email          String         @unique
  emailVerified  DateTime?
  imageUrl       String?
  privilege      UserPrivilege  @default(USER)
  provider       String         @default("PASSWORD")
  password       String?
  hash           String?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  deletedAt      DateTime?
  loginHistories LoginHistory[]
  profileUsers   ProfileUser[]
}

model ProfileUser {
  id        String  @id @default(uuid())
  userId    String
  profile   Profile @relation(fields: [profileId], references: [id])
  profileId String
  user      User    @relation(fields: [userId], references: [id])
  role      String

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

enum ProfileType {
  BUYER
  SELLER
  TENANT
  OWNER
  BROKER
  BUYER_SELLER
  DEFAULT
}

model LoginHistory {
  id         String   @id @default(uuid())
  loggedInAt DateTime @default(now())
  ipAddress  String
  location   String
  device     String
  userId     String
  user       User     @relation(fields: [userId], references: [id])
}

model Profile {
  id        String      @id @default(uuid())
  type      ProfileType
  firstName String
  lastName  String
  imageUrl  String?

  broker               Broker?
  owner                Owner?
  seller               Seller?
  buyer                Buyer?
  tenant               Tenant?
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  deletedAt            DateTime?
  propertyId           String?               @unique
  property             Property?
  profileUsers         ProfileUser[]
  conversationProfiles ConversationProfile[]
  messages             Message[]
}

model Broker {
  id          String    @id @default(uuid())
  phone       String
  email       String
  description String    @db.Text
  centrisUrl  String
  websiteUrl  String?
  oaciqNumber String
  latitude    Float
  longitude   Float
  radius      Float
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?

  agency   Agency? @relation(fields: [agencyId], references: [id])
  agencyId String?

  profile   Profile @relation(fields: [profileId], references: [id])
  profileId String  @unique
}

model Owner {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  profile   Profile @relation(fields: [profileId], references: [id])
  profileId String  @unique
}

model Seller {
  id String @id @default(uuid())

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  sellingPeriod String
  profile       Profile @relation(fields: [profileId], references: [id])
  profileId     String  @unique
}

model Buyer {
  id            String    @id @default(uuid())
  minimumPrice  Float
  maximumPrice  Float
  buyingPeriod  String
  latitude      Float
  longitude     Float
  radius        Float
  propertyTypes String[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  deletedAt     DateTime?

  brokerId  String?
  profile   Profile @relation(fields: [profileId], references: [id])
  profileId String  @unique
}

model Tenant {
  id String @id @default(uuid())

  minimumPrice Float
  maximumPrice Float
  buyingPeriod String
  latitude     Float
  longitude    Float
  radius       Float
  imageUrl     String?   @db.Text
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  deletedAt    DateTime?
  Profile      Profile   @relation(fields: [profileId], references: [id])
  profileId    String    @unique
}

model Agency {
  id        String  @id @default(uuid())
  name      String
  imageUrl  String?
  phone     String
  addressId String
  number    String
  email     String
  website   String

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  brokers   Broker[]
}

model Property {
  id              String    @id @default(uuid())
  title           String
  description     String    @db.Text
  imageUrl        String?   @db.Text
  price           Float     @default(0)
  currency        String
  rent            Float     @default(0)
  parkingSpots    Int
  yearBuilt       Int
  stories         Int
  mlsNumber       String
  garages         Int
  landSize        Int
  rooms           Int
  bedrooms        Int
  bathrooms       Int
  squareFeet      Int
  propertyType    String
  hasRefrigerator Boolean
  hasDishwasher   Boolean
  hasSauna        Boolean
  hasPool         Boolean
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  deletedAt       DateTime?
  addressId       String
  address         Address   @relation(fields: [addressId], references: [id])
  profileId       String    @unique
  profile         Profile   @relation(fields: [profileId], references: [id])
}

model Address {
  id               String     @id @default(uuid())
  unit             String?
  formattedAddress String
  streetNumber     String?
  streetName       String?
  city             String?
  region           String?
  postalCode       String?
  country          String
  latitude         Float
  longitude        Float
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
  deletedAt        DateTime?
  property         Property[]
}

model Conversation {
  id                   String                @id @default(uuid())
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  deletedAt            DateTime?
  messages             Message[]
  conversationProfiles ConversationProfile[]
}

model Message {
  id             String       @id @default(uuid())
  content        String       @db.Text
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  deletedAt      DateTime?
  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  profileId      String
  profile        Profile      @relation(fields: [profileId], references: [id])
}

model ConversationProfile {
  id             String       @id @default(uuid())
  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  profileId      String
  profile        Profile      @relation(fields: [profileId], references: [id])
  lastReadAt     DateTime     @default(now())
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  deletedAt      DateTime?
}
