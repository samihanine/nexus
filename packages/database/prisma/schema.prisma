generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserPrivilege {
  ADMINISTRATOR
  USER
  ROOT
}

model User {
  id               String         @id @default(uuid())
  name             String
  email            String         @unique
  emailVerified    DateTime?
  imageUrl         String?
  privilege        UserPrivilege  @default(USER)
  provider         String         @default("PASSWORD")
  password         String?
  hash             String?
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  deletedAt        DateTime?
  currentProfileId String?
  loginHistories   LoginHistory[]
  profileUsers     ProfileUser[]
}

enum ProfileUserRole {
  ADMINISTRATOR
}

model ProfileUser {
  id        String          @id @default(uuid())
  userId    String
  profile   Profile         @relation(fields: [profileId], references: [id])
  profileId String
  user      User            @relation(fields: [userId], references: [id])
  role      ProfileUserRole @default(ADMINISTRATOR)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

enum ProfileType {
  BUYER
  SELLER
  TENANT
  OWNER
  BROKER
  BUYER_SELLER
  DEFAULT
}

model LoginHistory {
  id         String   @id @default(uuid())
  loggedInAt DateTime @default(now())
  ipAddress  String
  location   String
  device     String
  userId     String
  user       User     @relation(fields: [userId], references: [id])
}

model Profile {
  id        String      @id @default(uuid())
  type      ProfileType
  firstName String
  lastName  String
  imageUrl  String?

  broker               Broker?
  owner                Owner?
  seller               Seller?
  buyer                Buyer?
  tenant               Tenant?
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  deletedAt            DateTime?
  propertyId           String?               @unique
  property             Property?
  profileUsers         ProfileUser[]
  conversationProfiles ConversationProfile[]
  messages             Message[]
}

model Broker {
  id          String    @id @default(uuid())
  phone       String
  email       String
  description String    @db.Text
  centrisUrl  String
  websiteUrl  String?
  oaciqNumber String
  radius      Float
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
  address     Address   @relation(fields: [addressId], references: [id])
  addressId   String
  agency      Agency?   @relation(fields: [agencyId], references: [id])
  agencyId    String?

  profile   Profile @relation(fields: [profileId], references: [id])
  profileId String  @unique
}

model Owner {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  profile   Profile @relation(fields: [profileId], references: [id])
  profileId String  @unique
}

model Seller {
  id String @id @default(uuid())

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  profile   Profile @relation(fields: [profileId], references: [id])
  profileId String  @unique
}

model Buyer {
  id                             String         @id @default(uuid())
  minimumPrice                   Float          @default(0)
  maximumPrice                   Float?
  buyingPeriod                   String         @default("0-6")
  description                    String         @default("") @db.Text
  addressId                      String
  minimumParkingSpots            Int            @default(0)
  minimumBathrooms               Int            @default(0)
  minimumRooms                   Int            @default(0)
  minimumLivableAreaInSquareFeet Int            @default(0)
  minimumLandAreaInSquareFeet    Int            @default(0)
  minimumYearBuilt               Int            @default(0)
  minimumStories                 Int            @default(0)
  minimumBedrooms                Int            @default(0)
  radius                         Float          @default(0)
  hasBasement                    Boolean        @default(false)
  hasElevator                    Boolean        @default(false)
  hasSauna                       Boolean        @default(false)
  hasPool                        Boolean        @default(false)
  hasFireplace                   Boolean        @default(false)
  hasGym                         Boolean        @default(false)
  propertyTypes                  PropertyType[]
  createdAt                      DateTime       @default(now())
  updatedAt                      DateTime       @updatedAt
  deletedAt                      DateTime?

  profile   Profile @relation(fields: [profileId], references: [id])
  profileId String  @unique

  address Address @relation(fields: [addressId], references: [id])
}

model Tenant {
  id String @id @default(uuid())

  minimumPrice Float
  maximumPrice Float
  buyingPeriod String
  latitude     Float
  longitude    Float
  radius       Float
  imageUrl     String?   @db.Text
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  deletedAt    DateTime?
  Profile      Profile   @relation(fields: [profileId], references: [id])
  profileId    String    @unique
}

model Agency {
  id        String  @id @default(uuid())
  name      String
  imageUrl  String?
  phone     String
  addressId String
  number    String
  email     String
  website   String

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  brokers   Broker[]
}

enum PropertyType {
  HOUSE
  CONDO
  LAND
  MULTIFAMILY
  TOWNHOUSE
}

model Property {
  id                      String       @id @default(uuid())
  type                    PropertyType @default(HOUSE)
  description             String       @db.Text
  imageUrls               String[]
  price                   Float        @default(0)
  currency                String
  rent                    Float        @default(0)
  parkingSpots            Int
  yearBuilt               Int
  stories                 Int          @default(0)
  mlsNumber               String?
  garages                 Int          @default(0)
  rooms                   Int          @default(1)
  bedrooms                Int          @default(1)
  bathrooms               Int          @default(1)
  livableAreaInSquareFeet Int          @default(0)
  landAreaInSquareFeet    Int          @default(0)
  hasRefrigerator         Boolean      @default(false)
  hasDishwasher           Boolean      @default(false)
  hasSauna                Boolean      @default(false)
  hasPool                 Boolean      @default(false)
  hasFireplace            Boolean      @default(false)
  hasGym                  Boolean      @default(false)
  hasElevator             Boolean      @default(false)
  hasBasement             Boolean      @default(false)
  sellingPeriod           String       @default("0-6")
  isSold                  Boolean      @default(false)
  isVisible               Boolean      @default(true)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  addressId String
  address   Address   @relation(fields: [addressId], references: [id])
  profileId String    @unique
  profile   Profile   @relation(fields: [profileId], references: [id])
}

model Address {
  id               String     @id @default(uuid())
  unit             String?
  formattedAddress String
  streetNumber     String?
  streetName       String?
  city             String?
  region           String?
  postalCode       String?
  country          String
  latitude         Float
  longitude        Float
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
  deletedAt        DateTime?
  properties       Property[]
  buyers           Buyer[]
  brokers          Broker[]
}

model Conversation {
  id                   String                @id @default(uuid())
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  deletedAt            DateTime?
  messages             Message[]
  conversationProfiles ConversationProfile[]
}

model Message {
  id             String       @id @default(uuid())
  content        String       @db.Text
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  deletedAt      DateTime?
  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  profileId      String
  profile        Profile      @relation(fields: [profileId], references: [id])
}

model ConversationProfile {
  id             String       @id @default(uuid())
  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  profileId      String
  profile        Profile      @relation(fields: [profileId], references: [id])
  lastReadAt     DateTime     @default(now())
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  deletedAt      DateTime?
}

model Waitlist {
  id        String    @id @default(uuid())
  email     String    @unique
  type      String    @default("BUYER")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model PropertyImage {
  id           String    @id @default(uuid())
  propertyId   String
  imageUrl     String
  description  String
  displayOrder Int       @default(0)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  deletedAt    DateTime?
}
